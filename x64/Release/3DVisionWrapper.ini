
[Log]

	EnableSplashScreen = false			| Enables or Disables the splashscreen. Usefull to know if the wrapper is being loaded or not.
	EnableLog = false 				| Enables Logging of wrapper internal information


[3D_Vision_Global_Settings]

	Enable3DVision = true				| Enable or Disable 3D VISION SUPPORT. If disabled the game will render normally (2D).
	ForceFullScreen = false				| Flag used only in SLI configurations. Forces the DX Device to be created in FullScreen Mode.
	ForceWindowModeSupport = false			| Force Window Mode context creation. This setting will not force the render engine to work in window mode. It is a flag used for DX device/context creation. Some applications require it.
	FullScreenDetection = true			| Enable of Disable Fullscreen detection. Some games will enter in a loop if this is enabled. 
	DepthMultiplicationFactor = 1.0			| Depth Hack. The Current depth Value will be multiplied with this factor. Ex: Current depth (NVpanel) is 50%. Factor is 2. Actual Depth will be 100%.
	DefaultConvergence = 0x00000000			| The default convergence value that is used for this game when the nVidia Profile is created. If you saved a different convergence (via hotkeys) this value will be ignored. Must be a hex value. This value overides the value read from the nip file.
	ForceNVProfileLoad = false			| This will force the Nvidia Profile to be loaded each time the wrapper is started!!! Your saved convergence value will be overwriten with the one above !!! Requires at least one game restart to take effect!
	3DVisionRating = 0.0				| Possible values: 0.0 - 3D Vision Ready; 1.0 - Excelent; 2.0 - Good; 3.0 - Fair; 4.0 - Not Recommended


[Render_Control_Options] 				
							
							
							| Modes Controlling the Rendering:
							| Use "SCREEN_BUFFER" option to copy what currently exists in the OpenGL Back Buffer (Framebuffer 0) | Required for games like MineCraft, ID5 Engine Games.
							| Use "NONE" option for normal buffer flipping.
	RenderMode = "NONE" 		


[Legacy_OpenGL_Calls]
							| This flag controls how the wrapper works internally.
							| LegacyMode is for old applications (OpenGL prior to version v.3.x)
							| Currently used in older games like: Star Wars: Knights of the Old Republic 1&2
	LegacyMode = false
	LegacyHUDSeparation = 0.0 			| 0.0 is no separation; Positive values will "push-in" the UI; Negative values will "pop-out" the UI;

	

[Alternative_3D_Settings]
							| Enable Toggle Mode: if set to true it will toggle between values. If set to false a value will be applied as long as you keep that key pressed.
							| Use only HEX NUMBERS: for both Keyboard Keys and Mouse Buttons
							| 0x70 = F1; 
							| 0x71 = F2; 
							| 0x72 = F3; 
							| Mouse: 
							| Left mouse btn :0x01
							| Right mouse btn :0x02
							| Middle mouse btn :0x04

	EnableToggleMode = false
	AltConvergenceKey = 0x00
	ConvergenceValue = 0.0


	
							| If LegacyMode is enabled this section is ignored
[Vertex_Stereo_InjectionPoint]

	Enable = true					| Enable StereoScopic 3D Injection. If Disabled the engine will render 2 images from the SAME perspective (2D).
	EnableFailureInfo = false			| If enabled will display all the Vertex Shaders in which the Stereoscopy wasn't inserted.
	InjectionPoint1 = "gl_Position.w ="		| Part of a STRING that is FOUND in all the VERTEXES. The "Stereo String" will be inserted after this line.
	InjectionPoint2 = "NULL"			| Additional Stereoscopy Injection Point
	InjectionPoint3 = "out_FragColor0 = "		| Additional Stereoscopy Injection Point
	InjectionPoint4 = "	out_FragColor0.w = "	| Additional Stereoscopy Injection Point
	UniformInjection1 = "#version"          	| Part of a STRING that is FOUND in all the VERTEX and PIXEL shaders. The Uniforms (required by "Stereo String") will be inserted after this line.
	UniformInjection2 = "NULL"          		| Additional Uniform Injection Point
	UniformInjection3 = "NULL"           		| Additional Uniform Injection Point
	UniformInjection4 = "NULL"           		| Additional Uniform Injection Point
	StereoString = "\n gl_Position.x += g_eye * g_eye_separation * (gl_Position.w - g_convergence);\n"



							| Custom 3D params sent to shaders: (ProgId, x, y, z, w).
[Stereo_Custom_Params]

| Example Shader
ShaderProgram|(1, 0.1, 0.2, 0.3, 0.4)
[End]
